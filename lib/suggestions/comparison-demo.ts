/**
 * Three-way comparison demo of autocomplete libraries
 * This demonstrates the differences between:
 * 1. The original autocomplete library
 * 2. The new suggestions Autocomplete wrapper (API-compatible)
 * 3. The advanced TypingSuggestions class
 *
 * Run with: bun run lib/suggestions/comparison-demo.ts
 */
import { Autocomplete as OriginalAutocomplete } from '../autocomplete/autocomplete';
import { Autocomplete as SuggestionsAutocomplete, TypingSuggestions } from './typing-suggestions';

// Test corpus from the original demo
const TEST_CORPUS = `
I want to eat a sandwich.
I want to eat a burger.
I want to eat a pizza.
I want to eat a sandwich for lunch.
I want to eat a pizza for lunch.
I want to drink a coffee.
Coffee is good for health.
Coffee is good for the heart.
Coffee is good for the brain.
Coffee is good for the body.
Coffee is good for the soul.
Coffee is good for the spirit.
Coffee is good for the mind.
Sometimes coffee is hot.
Sometimes coffee is cold.
Sometimes coffee is sweet.
Sometimes coffee is bitter.
Sometimes coffee is acidic.
Peanuts, pasta, peanut butter
`;

async function runComparison() {
  console.log('üîÑ Starting Three-Way Library Comparison\n');

  // Initialize all three libraries
  const originalAutocomplete = new OriginalAutocomplete();
  const suggestionsAutocomplete = new SuggestionsAutocomplete();
  const advancedSuggestions = new TypingSuggestions();

  console.log('üìö Training all libraries with the same corpus...');

  // Train all services
  originalAutocomplete.train(TEST_CORPUS);
  suggestionsAutocomplete.train(TEST_CORPUS);
  advancedSuggestions.processCorpus(TEST_CORPUS);

  console.log('‚úÖ All libraries trained successfully!\n');

  // Test 1: API Compatibility Check
  console.log('üîç Test 1: API Compatibility Check');
  console.log('Input: "p"');

  const originalCompletions = originalAutocomplete.getCompletions('p');
  const suggestionsCompletions = suggestionsAutocomplete.getCompletions('p');
  const advancedCompletions = advancedSuggestions.getCompletions('p').map(c => c.word);

  console.log('üì¶ Original Autocomplete:', originalCompletions);
  console.log('üîÑ Suggestions Autocomplete (API-compatible):', suggestionsCompletions);
  console.log('üöÄ Advanced TypingSuggestions:', advancedCompletions);
  console.log(
    '‚úÖ API Compatibility:',
    JSON.stringify(originalCompletions) === JSON.stringify(suggestionsCompletions) ? 'PASS' : 'FAIL'
  );
  console.log('');

  // Test 2: Next Word Prediction
  console.log('üîç Test 2: Next Word Prediction');
  console.log('Input: "I want to eat a"');

  const originalNextWord = originalAutocomplete.getNextWord('I want to eat a');
  const suggestionsNextWord = suggestionsAutocomplete.getNextWord('I want to eat a');
  const advancedNextWord = advancedSuggestions.getNextWord('I want to eat a').map(p => p.word);

  console.log('üì¶ Original Autocomplete:', originalNextWord);
  console.log('üîÑ Suggestions Autocomplete (API-compatible):', suggestionsNextWord);
  console.log('üöÄ Advanced TypingSuggestions:', advancedNextWord);
  console.log(
    '‚úÖ API Compatibility:',
    JSON.stringify(originalNextWord) === JSON.stringify(suggestionsNextWord) ? 'PASS' : 'FAIL'
  );
  console.log('');

  // Test 3: Next Phrase Prediction
  console.log('üîç Test 3: Next Phrase Prediction');
  console.log('Input: "Coffee is good for"');

  const originalNextPhrase = originalAutocomplete.getNextPhrase('Coffee is good for');
  const suggestionsNextPhrase = suggestionsAutocomplete.getNextPhrase('Coffee is good for');
  const advancedNextWordForPhrase = advancedSuggestions
    .getNextWord('Coffee is good for')
    .map(p => p.word);

  console.log('üì¶ Original Autocomplete:', originalNextPhrase);
  console.log('üîÑ Suggestions Autocomplete (API-compatible):', suggestionsNextPhrase);
  console.log('üöÄ Advanced TypingSuggestions (next words):', advancedNextWordForPhrase);
  console.log(
    '‚úÖ API Compatibility:',
    JSON.stringify(originalNextPhrase) === JSON.stringify(suggestionsNextPhrase) ? 'PASS' : 'FAIL'
  );
  console.log('');

  // Test 4: Service Ready Status
  console.log('üîç Test 4: Service Ready Status');

  console.log('üì¶ Original Autocomplete isReady():', originalAutocomplete.isReady());
  console.log('üîÑ Suggestions Autocomplete isReady():', suggestionsAutocomplete.isReady());
  console.log(
    'üöÄ Advanced TypingSuggestions vocabulary size:',
    advancedSuggestions.getVocabularySize()
  );
  console.log(
    '‚úÖ API Compatibility:',
    originalAutocomplete.isReady() === suggestionsAutocomplete.isReady() ? 'PASS' : 'FAIL'
  );
  console.log('');

  // Test 5: Statistics Comparison
  console.log('üìä Test 5: Statistics Comparison');

  const originalStats = originalAutocomplete.getStats();
  const suggestionsStats = suggestionsAutocomplete.getStats();
  const advancedStats = advancedSuggestions.getStats();

  console.log('üì¶ Original Autocomplete Stats:');
  console.log('   Total words:', originalStats.totalWords);
  console.log('   Total phrases:', originalStats.totalPhrases);
  console.log('   Total n-grams:', originalStats.totalNGrams);
  console.log('   Average word frequency:', originalStats.averageWordFrequency.toFixed(2));

  console.log('\nüîÑ Suggestions Autocomplete Stats:');
  console.log('   Total words:', suggestionsStats.totalWords);
  console.log('   Total phrases:', suggestionsStats.totalPhrases);
  console.log('   Total n-grams:', suggestionsStats.totalNGrams);
  console.log('   Average word frequency:', suggestionsStats.averageWordFrequency.toFixed(2));

  console.log('\nüöÄ Advanced TypingSuggestions Stats:');
  console.log('   Total words:', advancedStats.totalWords);
  console.log('   Unique words:', advancedStats.uniqueWords);
  console.log('   Bigram count:', advancedStats.bigramCount);
  console.log('   Trigram count:', advancedStats.trigramCount);
  console.log('   Average word length:', advancedStats.averageWordLength.toFixed(2));

  console.log('\n‚úÖ API Compatibility Stats:');
  console.log(
    '   Total words match:',
    originalStats.totalWords === suggestionsStats.totalWords ? 'PASS' : 'FAIL'
  );
  console.log(
    '   Total n-grams match:',
    originalStats.totalNGrams === suggestionsStats.totalNGrams ? 'PASS' : 'FAIL'
  );
  console.log('');

  // Test 6: Edge Cases
  console.log('üîç Test 6: Edge Cases');

  console.log('Empty input:');
  console.log('üì¶ Original Autocomplete:', originalAutocomplete.getCompletions(''));
  console.log('üîÑ Suggestions Autocomplete:', suggestionsAutocomplete.getCompletions(''));
  console.log(
    'üöÄ Advanced TypingSuggestions:',
    advancedSuggestions.getCompletions('').map(c => c.word)
  );

  console.log('\nNon-existent sequence:');
  console.log('üì¶ Original Autocomplete:', originalAutocomplete.getNextWord('xyz abc def'));
  console.log('üîÑ Suggestions Autocomplete:', suggestionsAutocomplete.getNextWord('xyz abc def'));
  console.log(
    'üöÄ Advanced TypingSuggestions:',
    advancedSuggestions.getNextWord('xyz abc def').map(p => p.word)
  );
  console.log('');

  // Test 7: Performance Comparison
  console.log('üîç Test 7: Performance Comparison');

  const iterations = 1000;

  // Test original autocomplete performance
  const originalStart = performance.now();
  for (let i = 0; i < iterations; i++) {
    originalAutocomplete.getCompletions('co');
  }
  const originalEnd = performance.now();
  const originalTime = originalEnd - originalStart;

  // Test suggestions autocomplete performance
  const suggestionsStart = performance.now();
  for (let i = 0; i < iterations; i++) {
    suggestionsAutocomplete.getCompletions('co');
  }
  const suggestionsEnd = performance.now();
  const suggestionsTime = suggestionsEnd - suggestionsStart;

  // Test advanced suggestions performance
  const advancedStart = performance.now();
  for (let i = 0; i < iterations; i++) {
    advancedSuggestions.getCompletions('co');
  }
  const advancedEnd = performance.now();
  const advancedTime = advancedEnd - advancedStart;

  console.log(`üì¶ Original Autocomplete: ${iterations} lookups in ${originalTime.toFixed(2)}ms`);
  console.log(
    `üîÑ Suggestions Autocomplete: ${iterations} lookups in ${suggestionsTime.toFixed(2)}ms`
  );
  console.log(
    `üöÄ Advanced TypingSuggestions: ${iterations} lookups in ${advancedTime.toFixed(2)}ms`
  );
  console.log(`‚ö° Performance ratios:`);
  console.log(
    `   Original vs Suggestions Autocomplete: ${(originalTime / suggestionsTime).toFixed(2)}x`
  );
  console.log(`   Original vs Advanced: ${(originalTime / advancedTime).toFixed(2)}x`);
  console.log('');

  // Test 8: Advanced Features (Advanced TypingSuggestions Only)
  console.log('üîç Test 8: Advanced Features (Advanced TypingSuggestions Only)');

  console.log('Most common words:');
  const commonWords = advancedSuggestions.getMostCommonWords(5);
  console.log(
    'üöÄ Advanced TypingSuggestions:',
    commonWords.map(w => ({ word: w.word, frequency: w.frequency }))
  );

  console.log('\nWord frequency lookup:');
  console.log('üöÄ Frequency of "coffee":', advancedSuggestions.getWordFrequency('coffee'));
  console.log('üöÄ Frequency of "pizza":', advancedSuggestions.getWordFrequency('pizza'));

  console.log('\nWord existence check:');
  console.log('üöÄ Has "coffee":', advancedSuggestions.hasWord('coffee'));
  console.log('üöÄ Has "xyz":', advancedSuggestions.hasWord('xyz'));
  console.log('');

  // Test 9: Custom Options (Advanced TypingSuggestions Only)
  console.log('üîç Test 9: Custom Options (Advanced TypingSuggestions Only)');

  console.log('Filtered completions (min frequency 2):');
  const filteredCompletions = advancedSuggestions.getCompletions('co', { minFrequency: 2 });
  console.log(
    'üöÄ Advanced TypingSuggestions:',
    filteredCompletions.map(c => ({ word: c.word, freq: c.frequency }))
  );

  console.log('\nLimited completions (max 3 results):');
  const limitedCompletions = advancedSuggestions.getCompletions('co', { maxResults: 3 });
  console.log(
    'üöÄ Advanced TypingSuggestions:',
    limitedCompletions.map(c => c.word)
  );

  console.log('\nContext predictions with options:');
  const contextPredictions = advancedSuggestions.getNextWord('Coffee is', {
    maxResults: 3,
    useTrigrams: true,
    useBigrams: true,
  });
  console.log(
    'üöÄ Advanced TypingSuggestions:',
    contextPredictions.map(p => ({ word: p.word, context: p.context }))
  );
  console.log('');

  // Test 10: Rich Data Comparison
  console.log('üîç Test 10: Rich Data Comparison');
  console.log('Input: "co" with detailed results');

  const originalSimple = originalAutocomplete.getCompletions('co');
  const suggestionsSimple = suggestionsAutocomplete.getCompletions('co');
  const advancedRich = advancedSuggestions.getCompletions('co');

  console.log('üì¶ Original Autocomplete (simple):', originalSimple);
  console.log('üîÑ Suggestions Autocomplete (simple):', suggestionsSimple);
  console.log(
    'üöÄ Advanced TypingSuggestions (rich):',
    advancedRich.map(c => ({
      word: c.word,
      frequency: c.frequency,
      confidence: c.confidence?.toFixed(3),
    }))
  );
  console.log('');

  // Summary
  console.log('üìã Three-Way Comparison Summary:');
  console.log('');
  console.log('üì¶ Original Autocomplete Library:');
  console.log('   ‚úÖ Simple, focused API');
  console.log('   ‚úÖ Word completions');
  console.log('   ‚úÖ Next word predictions');
  console.log('   ‚úÖ Next phrase predictions');
  console.log('   ‚úÖ Basic statistics');
  console.log('   ‚úÖ Ready status check');
  console.log('');
  console.log('üîÑ Suggestions Autocomplete (API-Compatible Wrapper):');
  console.log('   ‚úÖ 100% API compatibility with original');
  console.log('   ‚úÖ Drop-in replacement');
  console.log('   ‚úÖ Same method signatures');
  console.log('   ‚úÖ Same return types');
  console.log('   ‚úÖ Wraps advanced TypingSuggestions');
  console.log('');
  console.log('üöÄ Advanced TypingSuggestions:');
  console.log('   ‚úÖ Rich data with frequency and confidence');
  console.log('   ‚úÖ Advanced filtering and sorting options');
  console.log('   ‚úÖ Comprehensive statistics');
  console.log('   ‚úÖ Word frequency lookups');
  console.log('   ‚úÖ Most common words analysis');
  console.log('   ‚úÖ Customizable parameters');
  console.log('   ‚úÖ Trie-based efficient prefix matching');
  console.log('   ‚úÖ N-gram language models (bigram/trigram)');
  console.log('   ‚úÖ Confidence scoring');
  console.log('   ‚úÖ Context-aware predictions');
  console.log('');
  console.log('üéØ Key Benefits:');
  console.log('   ‚Ä¢ Seamless migration: Change import, keep same code');
  console.log('   ‚Ä¢ Backward compatibility: No breaking changes');
  console.log('   ‚Ä¢ Advanced features: Access rich data when needed');
  console.log('   ‚Ä¢ Performance: Better performance with advanced features');
  console.log('   ‚Ä¢ Flexibility: Choose simple or advanced API');
  console.log('');

  console.log('‚úÖ Three-way comparison completed successfully!');
}

// Run the comparison
runComparison().catch(console.error);
