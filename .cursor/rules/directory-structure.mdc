---
alwaysApply: true
---

# Directory Structure Rule

This rule ensures consistent directory organization for the September project following Next.js App Router best practices.

## Required Directory Structure

```
september/
├── app/                          # Next.js App Router
│   ├── (auth)/                   # Route groups for authentication
│   ├── (app)/              # Route groups for main app
│   ├── api/                      # API routes
│   ├── globals.css               # Global styles
│   ├── layout.tsx                # Root layout
│   └── page.tsx                  # Home page
├── components/                   # Reusable UI components
│   ├── ui/                       # Shadcn/ui components
│   ├── forms/                    # Form components
│   ├── conversation/             # Conversation-specific components
│   ├── voice/                    # Voice-related components
│   └── layout/                   # Layout components
├── lib/                          # Utility functions and configurations
├── hooks/                        # Custom React hooks
├── services/                     # External service integrations
├── data/                         # Static data and configurations
├── public/                       # Static assets
│   ├── images/
│   ├── audio/
│   └── data/
├── styles/                       # Additional styles
├── config/                       # Configuration files
├── types/                        # TypeScript type definitions
└── docs/                         # Documentation
```

## File Placement Rules

### 1. App Router Files

- **DO**: Place all route files in `app/` directory
- **DO**: Use route groups `(auth)` and `(app)` for organization
- **DO**: Place API routes in `app/api/`
- **DON'T**: Create pages outside the app directory

```typescript
// Good: app/(app)/conversation/page.tsx
export default function ConversationPage() {
  return <div>Conversation</div>;
}

// Bad: pages/conversation.tsx (Pages Router pattern)
```

### 2. Component Organization

- **DO**: Organize components by feature in subdirectories
- **DO**: Place Shadcn/ui components in `components/ui/`
- **DO**: Use descriptive directory names

```typescript
// Good: components/conversation/message-bubble.tsx
export function MessageBubble() {
  return <div>Message</div>;
}

// Good: components/voice/voice-selector.tsx
export function VoiceSelector() {
  return <select>Voice options</select>;
}

// Bad: components/bubble.tsx (unclear purpose)
```

### 3. Hooks Directory

- **DO**: Place all custom hooks in `hooks/` directory
- **DO**: Use descriptive hook names with "use-" prefix
- **DO**: Organize by feature when there are many hooks

```typescript
// Good: hooks/use-speech-to-text.ts
export function useSpeechToText() {
  // Implementation
}

// Good: hooks/use-conversation.ts
export function useConversation() {
  // Implementation
}
```

### 4. Services Directory

- **DO**: Place external API integrations in `services/`
- **DO**: Name files after the service they integrate with
- **DO**: Keep service logic separate from components

```typescript
// Good: services/elevenlabs.ts
export class ElevenLabsService {
  async cloneVoice() {
    // Implementation
  }
}

// Good: services/openai.ts
export class OpenAIService {
  async getCompletion() {
    // Implementation
  }
}
```

### 5. Types Directory

- **DO**: Place TypeScript type definitions in `types/` directory
- **DO**: Organize types by domain/feature
- **DO**: Use descriptive filenames

```typescript
// Good: types/conversation.ts
export interface Message {
  id: string;
  content: string;
  timestamp: Date;
}

// Good: types/voice.ts
export interface VoiceSettings {
  voiceId: string;
  speed: number;
  pitch: number;
}
```

### 6. Public Assets

- **DO**: Organize static assets in logical subdirectories
- **DO**: Place images in `public/images/`
- **DO**: Place audio files in `public/audio/`
- **DO**: Place data files in `public/data/`

```
// Good structure:
public/
├── images/
│   ├── logo.png
│   └── favicon/
├── audio/
│   └── samples/
└── data/
    ├── corpus.csv
    └── ngsl.csv
```

## Import Path Guidelines

### 1. Use Consistent Import Paths

```typescript
// Good: Relative imports for local files
// Good: Absolute imports from project root
import { Button } from '@/components/ui/button';
import { useSpeechToText } from '@/hooks/use-speech-to-text';

import { MessageBubble } from '../conversation/message-bubble';
```

### 2. Group Imports Logically

```typescript
// Good: External libraries first, then internal imports
import React from 'react';

import { NextPage } from 'next';

import { Button } from '@/components/ui/button';
import { useConversation } from '@/hooks/use-conversation';
import { ConversationService } from '@/services/conversation';
```

## File Naming Conventions

### 1. Component Files

- **DO**: Use kebab-case for component files
- **DON'T**: Use camelCase or snake_case

```
// Good:
components/ui/button.tsx
components/conversation/message-bubble.tsx
components/voice/voice-selector.tsx

// Bad:
components/messageComponent.tsx
components/voice_selector.tsx
```

### 2. Hook Files

- **DO**: Use kebab-case with "use-" prefix
- **DO**: Match the hook function name

```
// Good:
hooks/use-speech-to-text.ts  // exports useSpeechToText
hooks/use-conversation.ts    // exports useConversation

// Bad:
hooks/speechToText.ts
hooks/conversationHook.ts
```

### 3. Service Files

- **DO**: Use kebab-case for service files
- **DO**: Include "service" suffix when ambiguous
- **DO**: Logically group services by domain or use case

```
// Good:
services/voice/elevenlabs.ts
services/llm/openai.ts
services/db/database-service.ts

// Bad:
services/ElevenLabs.ts
services/ai.ts (too generic)
```

## Directory Creation Guidelines

### 1. Create Directories as Needed

- **DO**: Create feature-specific subdirectories when you have 3+ related files
- **DO**: Use clear, descriptive directory names
- **DON'T**: Create deeply nested directory structures (max 3 levels)

### 2. Maintain Consistency

- **DO**: Follow the established pattern for similar features
- **DO**: Update this rule when adding new directory patterns
- **DON'T**: Create ad-hoc directory structures

## Enforcement

When creating new files or directories:

1. **Check** if the file type has a designated location in this structure
2. **Follow** the naming conventions for that file type
3. **Create** necessary parent directories if they don't exist
4. **Update** import paths to use the new structure
5. **Document** any new patterns that don't fit existing guidelines

## Examples

### Adding a New Feature

When adding a "settings" feature:

```
1. Create route: app/(app)/settings/page.tsx
2. Create components: components/settings/
3. Create hooks: hooks/use-settings.ts
4. Create types: types/settings.ts
5. Create service: services/settings.ts
```

### Adding a New Component

When adding a new UI component:

```
1. Determine category (ui, forms, conversation, voice, layout)
2. Place in appropriate subdirectory
3. Use consistent naming convention
4. Export from appropriate index file if needed
```
