---
description: 
globs: 
alwaysApply: false
---

# Rule: Managing a Feature Implementation

## Goal

To guide an AI assistant in creating a detailed Feature Implementation Plan (FIP) in Markdown format, based on an initial user prompt. The FIP should be clear, actionable, and suitable for a junior developer to understand and implement the feature.

## Process

1.  **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality.
2.  **Ask Clarifying Questions:** Before writing the FIP, the AI _must_ ask clarifying questions one by one to gather sufficient detail. The goal is to understand the "what" and "why" of the feature, not necessarily the "how" (which the developer will figure out). Make sure to provide options in letter/number lists so I can respond easily with my selections.
3.  **Generate FIP:** Based on the initial prompt and the user's answers to the clarifying questions, generate a FIP using the structure outlined below.
4.  **Save FIP:** Save the generated document as `[feature-name].fip.md` inside the `/tasks` directory.

## Clarifying Questions (Examples)

The AI should adapt its questions based on the prompt, but here are some common areas to explore:

- **Problem/Goal:** "What problem does this feature solve for the user?" or "What is the main goal we want to achieve with this feature?"
- **Target User:** "Who is the primary user of this feature?"
- **Core Functionality:** "Can you describe the key actions a user should be able to perform with this feature?"
- **Acceptance Criteria:** "How will we know when this feature is successfully implemented? What are the key success criteria?"
- **Scope/Boundaries:** "Are there any specific things this feature _should not_ do (non-goals)?"
- **Data Requirements:** "What kind of data does this feature need to display or manipulate?"
- **Design/UI:** "Are there any existing design mockups or UI guidelines to follow?" or "Can you describe the desired look and feel?"
- **Edge Cases:** "Are there any potential edge cases or error conditions we should consider?"

## FIP Structure

The generated FIP should include the following sections:

1.  **Introduction/Overview:** Briefly describe the feature and the problem it solves. State the goal.
2.  **Goals:** List the specific, measurable objectives for this feature.
3.  **User Stories:** Detail the user narratives describing feature usage and benefits.
4.  **Tasks:** List the specific tasks that need to be completed to implement the feature.
5.  **Open Questions:** List any remaining questions or areas needing further clarification.

## Create Tasks

In the same FIP file, create tasks.

1.  **Analyze FIP:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified FIP.
2.  **Phase 1: Generate Parent Tasks:** Based on the FIP analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the FIP. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
3.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
4.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the FIP.
5.  **Identify Relevant Files:** Based on the tasks and FIP and the existing project file structure identify potential files that will need to be created or modified. List these under the `Relevant Files` section, including corresponding test files if applicable.
6.  **Generate Final Output:** In the same file, combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.

### Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `path/to/potential/file1.ts` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `path/to/another/file.tsx` - Brief description (e.g., API route handler for data submission).
- `lib/utils/helpers.ts` - Brief description (e.g., Utility functions needed for calculations).

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the PRD is a **junior developer**. Therefore, requirements should be explicit, unambiguous, and avoid jargon where possible. Provide enough detail for them to understand the feature's purpose and core logic.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `[feature-name].fip.md`

## Final instructions

1. Do NOT start implementing the FIP
2. Make sure to ask the user clarifying questions
3. Take the user's answers to the clarifying questions and improve the FIP
4. STOP after generating sub-tasks.
