---
description:
globs:
alwaysApply: false
---

# Rule: Generating a Task List from a spec document

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing spec document. The task list should guide a developer through implementation.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `[spec-file-name].tasks.md` (e.g., `user-profile-editing.tasks.md`)

## Process

1.  **Receive spec Reference:** The user points the AI to a specific spec file
2.  **Analyze spec:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified spec.
3.  **Phase 1: Generate Parent Tasks:** Based on the spec analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the spec. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go". 5. **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the spec.
5.  **Identify Relevant Files:** Based on the tasks and spec and the existing project file structure identify potential files that will need to be created or modified. List these under the `Relevant Files` section, including corresponding test files if applicable.
6.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
7.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `[spec-file-name].tasks.md`, where `[spec-file-name]` matches the base name of the input spec file (e.g., if the input was `user-profile-editing.spec.md`, the output is `user-profile-editing.tasks.md`).

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `path/to/potential/file1.ts` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `path/to/another/file.tsx` - Brief description (e.g., API route handler for data submission).
- `lib/utils/helpers.ts` - Brief description (e.g., Utility functions needed for calculations).

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.
